#define INF 9999

        int matriceaCosturilor[N][N]={
        {0,10,INF,5},
        {INF,1,6,INF},
        {INF,INF,0,9},
        {INF,9,INF,0}
        };


        __global__ void RoyFloyd(int costMatrixGraph[N][N],int k)   //Kernel-ul
        {

        int i=threadIdx.x;
        int j=threadIdx.y;

        if(matriceaCosturilor[i][k]+matriceaCosturilor[k][j]<matriceaCosturilor[i][j]){
        matriceaCosturilor[i][j]=matriceaCosturilor[i][k]+matriceaCosturilor[k][j];
        }
        }


        int main()
        {

        int*matrix;

        cudaMalloc(&matrix,N*N*sizeof(int)); //alocare memorie matrice
        cudaMemcpy(matrix,matriceaCosturilor N*N*sizeof(int),cudaMemcpyHostToDevice);
        cudaMalloc(&d_k,sizeof(int));

        for(int k=0;k<SIZE; k++){
        RoyFloyd<<<1,32>>>(matrix,k);
        }
        cudaFree(matriceaCosturilor);//eliberare memorie 
        cudaFree(matrix);
        }